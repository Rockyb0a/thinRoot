#!/bin/sh
#
# start script to download and setup the global environment from
# a boot server by trying to download certain netfiles which store
# environment parameters and will be put into /etc/env.d
#

TMPDIR=/tmp/config
ENVDIR=/etc/env.d
BASENAME=thinroot.conf
NUM=1

init() {
  # source /proc/cmdline to that we can grab BOOT_IMAGE
  eval $(cat /proc/cmdline | cut -d " " -f1)

  # get the BASE_PATH to the boot server from BOOT_IMAGE
  if [[ -n ${BOOT_IMAGE} ]]; then
    BASE_PATH=$(dirname ${BOOT_IMAGE})
    echo "BASE_PATH=${BASE_PATH}" >>${TMPDIR}/${BASENAME}

    # source the file with exporting all variables in it
    set -o allexport
    source ${TMPDIR}/${BASENAME}
    set +o allexport

    # link the file to /etc/env.d
    ln -sf ${TMPDIR}/${BASENAME} ${ENVDIR}/$(printf "%04d" ${NUM})-${BASENAME}.env
    NUM=$((++NUM))
  fi
}

install_net_overlay() {
  # this function downloads a global net overlay
  # file (overlay.tar.bz2) and installs it on top
  # of the rootfs
  /usr/bin/wget -q ${BASE_PATH}/overlay.pkg -O ${TMPDIR}/overlay.pkg
  if [[ $? -eq 0 ]]; then
    /bin/tar -C / -xf ${TMPDIR}/overlay.pkg
  fi
}

load_thinroot_network() {
  # get thinroot.network file and source all env variables in it
  /usr/bin/wget -q ${BASE_PATH}/conf/${BASENAME}.network -O ${TMPDIR}/${BASENAME}.network
  if [[ $? -eq 0 ]]; then
    # source the file with exporting all variables in it
    set -o allexport
    source ${TMPDIR}/${BASENAME}.network
    set +o allexport

    # link the file to /etc/env.d
    ln -sf ${TMPDIR}/${BASENAME}.network ${ENVDIR}/$(printf "%04d" ${NUM})-${BASENAME}.network.env
    NUM=$((++NUM))
  fi
}

load_thinroot_hosts() {
  # define a default CONFFILES variable to match the first
  # 3 character of the hostname
  CONFFILES=".group-$(echo ${HOSTNAME} | cut -c1-3)"

  # get thinroot.hosts file first
  /usr/bin/wget -q ${BASE_PATH}/conf/thinroot.hosts -O ${TMPDIR}/thinroot.hosts
  if [[ $? -eq 0 ]]; then

    # put all additional groups matching the hostname
    # to the host variable
    FOUND_GRP=$(grep -m1 -e ^${HOSTNAME} ${TMPDIR}/thinroot.hosts | cut -d" " -f "2-")
    if [[ -n "${FOUND_GRP}" ]]; then
      for grp in ${FOUND_GRP}; do
        # a comment lets us break out here
        if [[ "${grp}" == "#" ]]; then
          break
        fi
        if [[ -n "${grp}" && "${grp}" != "-" ]]; then
          CONFFILES="${CONFFILES} .group-${grp}"
        fi
      done
    fi
    MAC_ADDR=$(cat /sys/class/net/$(ip route show default | awk '/default/ {print $5}')/address)
    FOUND_GRP=$(grep -m1 -i ${MAC_ADDR} ${TMPDIR}/thinroot.hosts | cut -d" " -f "2-")
    if [[ -n "${FOUND_GRP}" ]]; then
      for grp in ${FOUND_GRP}; do
        # a comment lets us break out here
        if [[ "${grp}" == "#" ]]; then
          break
        fi
        if [[ -n "${grp}" && "${grp}" != "-" ]]; then
          CONFFILES="${CONFFILES} .group-${grp}"
        fi
      done

      if [[ "${HOSTNAME}" == "localhost" ]]; then
        NEW_HOSTNAME=$(grep -m1 -i ${MAC_ADDR} ${TMPDIR}/thinroot.hosts | cut -f1)
        if [[ -n "${NEW_HOSTNAME}" && "${NEW_HOSTNAME}" != "-" ]]; then
          /bin/hostname "${NEW_HOSTNAME}"
          HOSTNAME=$(/bin/hostname)
        fi
      fi
    fi
  fi
}

load_thinroot_hostipmac() {
  HOSTNAME=$(/bin/hostname)
  IP=$(ip route get 1 | awk '{print $NF;exit}')
  MAC=$(cat /sys/class/net/$(ip route show default | awk '/default/ {print $5}')/address | tr -d :)
  CONFFILES="${CONFFILES} -${HOSTNAME} -${IP} -${MAC}"
}

load_thinroot_conffiles() {
  for file in ${CONFFILES}; do
    # get thinroot.group-XXXX file and source all env variables in it
    /usr/bin/wget -q ${BASE_PATH}/conf/${BASENAME}${file} -O ${TMPDIR}/${BASENAME}${file}
    if [[ $? -eq 0 ]]; then
      # source the file with exporting all variables in it
      set -o allexport
      source ${TMPDIR}/${BASENAME}${file}
      set +o allexport

      # link the file to /etc/env.d
      ln -sf ${TMPDIR}/${BASENAME}${file} ${ENVDIR}/$(printf "%04d" ${NUM})-${BASENAME}${file}.env
      NUM=$((++NUM))
    fi
  done
}

setup_xconf() {

  # 00-keyboard.conf
  if [[ -n "${XKBLAYOUT}" ]]; then
    sed -i "/Option .*XkbLayout/c\\\tOption \"XkbLayout\" \"${XKBLAYOUT}\"" /etc/X11/xorg.conf.d/00-keyboard.conf
  fi
  if [[ -n "${XKBMODEL}" ]]; then
    sed -i "/Option .*XkbModel/c\\\tOption \"XkbModel\" \"${XKBMODEL}\"" /etc/X11/xorg.conf.d/00-keyboard.conf
  fi
  if [[ -n "${XKBVARIANT}" ]]; then
    sed -i "/Option .*XkbVariant/c\\\tOption \"XkbVariant\" \"${XKBVARIANT}\"" /etc/X11/xorg.conf.d/00-keyboard.conf
  fi
  if [[ -n "${XKBOPTIONS}" ]]; then
    sed -i "/Option .*XkbOptions/c\\\tOption \"XkbOptions\" \"${XKBOPTIONS}\"" /etc/X11/xorg.conf.d/00-keyboard.conf
  fi
  if [[ -n "${KEYBOARD_AUTOREPEAT}" ]]; then
    sed -i "/Option .*AutoRepeat/c\\\tOption \"AutoRepeat\" \"${KEYBOARD_AUTOREPEAT}\"" /etc/X11/xorg.conf.d/00-keyboard.conf
  fi

  # 01-mouse.conf
  if [[ -n "${MOUSE_RESOLUTION}" ]]; then
    sed -i "/Option .*Resolution/c\\\tOption \"Resolution\" \"${MOUSE_RESOLUTION}\"" /etc/X11/xorg.conf.d/01-mouse.conf
  fi

  # 10-serverlayout.conf
  if [[ -n "${SCREEN_BLANK_TIME}" ]]; then
    sed -i "/Option .*BlankTime/c\\\tOption \"BlankTime\" \"${SCREEN_BLANK_TIME}\"" /etc/X11/xorg.conf.d/10-serverlayout.conf
  fi
  if [[ -n "${SCREEN_STANDBY_TIME}" ]]; then
    sed -i "/Option .*StandbyTime/c\\\tOption \"StandbyTime\" \"${SCREEN_STANDBY_TIME}\"" /etc/X11/xorg.conf.d/10-serverlayout.conf
  fi
  if [[ -n "${SCREEN_SUSPEND_TIME}" ]]; then
    sed -i "/Option .*SuspendTime/c\\\tOption \"SuspendTime\" \"${SCREEN_SUSPEND_TIME}\"" /etc/X11/xorg.conf.d/10-serverlayout.conf
  fi
  if [[ -n "${SCREEN_OFF_TIME}" ]]; then
    sed -i "/Option .*OffTime/c\\\tOption \"OffTime\" \"${SCREEN_OFF_TIME}\"" /etc/X11/xorg.conf.d/10-serverlayout.conf
  fi
  if [[ -n "${DONT_VT_SWITCH_STATE}" ]]; then
    sed -i "/Option .*DontVTSwitch/c\\\tOption \"DontVTSwitch\" \"${DONT_VT_SWITCH_STATE}\"" /etc/X11/xorg.conf.d/10-serverlayout.conf
  fi
  if [[ -n "${DONT_ZAP_STATE}" ]]; then
    sed -i "/Option .*DontZap/c\\\tOption \"DontZap\" \"${DONT_ZAP_STATE}\"" /etc/X11/xorg.conf.d/10-serverlayout.conf
  fi
}

setup_audio() {
  /usr/sbin/alsactl init &>/dev/null
  for card in $(grep -e ":" /proc/asound/cards | cut -c2); do
    if [[ -n "${AUDIO_LEVEL}" ]]; then
      for control in Master PCM CD Video; do
        if /usr/bin/amixer sget -c ${card} ${control} &>/dev/null; then
          /usr/bin/amixer sset -c ${card} ${control} ${AUDIO_LEVEL}% unmute &>/dev/null
          /usr/bin/amixer sset -c ${card} ${control} unmute &>/dev/null
        fi
      done
    fi
    if [[ -n "${MIC_LEVEL}" ]] && [[ "${MIC_LEVEL}" -gt "0" ]]; then
      [[ -z "${MIC_DEVICE}" ]] && MIC_DEVICE=Mic
      if /usr/bin/amixer sget -c ${card} ${MIC_DEVICE} &>/dev/null; then
        if /usr/bin/amixer sget -c ${card} Capture &>/dev/null; then
          /usr/bin/amixer sset Capture ${MIC_LEVEL}% unmute &>/dev/null
        fi
        /usr/bin/amixer sset ${MIC_DEVICE} playback mute &>/dev/null
        /usr/bin/amixer sset ${MIC_DEVICE} ${MIC_LEVEL}% cap &>/dev/null
      elif /usr/bin/amixer sget -c ${card} Capture &>/dev/null; then
        /usr/bin/amixer sset Capture 0% &>/dev/null
      fi
    fi
    for control in $UNMUTE; do
      if /usr/bin/amixer sget -c ${card} ${control} &>/dev/null; then
        /usr/bin/amixer sset -c ${card} ${control} unmute &>/dev/null
      fi
    done
    for control in $MUTE; do
      if /usr/bin/amixer sget -c ${card} ${control} &>/dev/null; then
        /usr/bin/amixer sset -c ${card} ${control} mute &>/dev/null
      fi
    done
  done
}

setup_shutdown_cronjob() {
  [[ -z "${SHUTDOWN_IDLE_INTERVAL}" ]] && SHUTDOWN_IDLE_INTERVAL=5
  echo "*/${SHUTDOWN_IDLE_INTERVAL} * * * * /bin/idle-check.sh &>/dev/null" >>/etc/crontab
}

start() {
  echo -n "Setup Environment: "

  # create tmpdir and envdir
  mkdir -p ${TMPDIR}
  mkdir -p ${ENVDIR}
  mkdir -p /var/run/usbmount

  # initialize everything
  init

  if [[ -n ${BOOT_IMAGE} ]]; then
    # retrieve+install a net overlay file
    install_net_overlay

    # load thinroot.network env file
    load_thinroot_network

    # load/parse thinroot.hosts file
    load_thinroot_hosts

    # get hostname, ip and mac address
    load_thinroot_hostipmac

    # load all thinroot.conf.XXXXX conffiles
    load_thinroot_conffiles

    # setup/tune X11 configs
    setup_xconf

    # setup/tune audio/alsa
    setup_audio

    # setup the shutdown cronjob
    setup_shutdown_cronjob
  fi

  echo "OK"
}

restart() {
  start
}

case "$1" in
  start)
    start
  ;;
  stop)
    # nothing
  ;;
  restart|reload)
    restart
  ;;
  *)
    echo "Usage: $0 {start|restart}"
    exit 1
esac

exit $?
